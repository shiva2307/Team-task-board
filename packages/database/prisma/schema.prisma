generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  passwordHash  String?
  avatarUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  memberships   ProjectMember[]
  assignedTasks Task[]    @relation("TaskAssignee")
  comments      Comment[]
}

model Project {
  id          String          @id @default(cuid())
  name        String
  key         String          @unique @db.VarChar(10)
  description String?
  createdBy   String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  members     ProjectMember[]
  tasks       Task[]
  labels      Label[]
}

model ProjectMember {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role
  joinedAt  DateTime @default(now())

  @@id([projectId, userId])
  @@index([userId])
  @@index([projectId])
}

model Task {
  id          String        @id @default(cuid())
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  title       String
  description String?
  status      TaskStatus    @default(TODO)
  assignee    User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  priority    TaskPriority  @default(MEDIUM)
  dueDate     DateTime?
  orderIndex  Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  comments    Comment[]
  labels      TaskLabel[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
}

model Comment {
  id        String   @id @default(cuid())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  body      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Label {
  id        String     @id @default(cuid())
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  name      String
  color     String     @db.VarChar(7)
  tasks     TaskLabel[]

  @@unique([projectId, name])
}

model TaskLabel {
  task   Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
  label  Label @relation(fields: [labelId], references: [id], onDelete: Cascade)
  labelId String

  @@id([taskId, labelId])
}
